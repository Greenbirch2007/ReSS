


head first java



编写程序，编译，运行


java的工作方式

它的目标是要让你写出一个应用程序


源代码 (编写源代码文件)


编译器(用编译器运行源代码)

输出:编译器会产出字节码


java虚拟机(JVM)

用javac编译程序把文件进行编译，然后在某个Java虚拟机上执行编译
过的字节码


源文件(.java)带有类的定义。类用来表示程序的一个组件，
小程序或许只会一个类。类的内容必须包在花括号里面


类
public class Dog{}


类存于源文件里面
方法存于类中
语句(statement)存于方法中


什么是类？


类中带有一个或多个方法。在Gog这个类中，bark方法带有，方法必须在类的内部声明


public class Dog{
	void bark()
}

方法


什么是方法？


在方法的花括号中编写方法应该执行的指令。
方法代码是友一组语句所组成，你可以把方法想象成一个函数或过程。

public class Dog{
	void bark(){
	statement1;
	statement2;
}}



剖析类

当java虚拟机启动执行时，它会寻找在命令列所指定的类。然后它会锁定


public static void main(String[] args){
	}


接着Java虚拟机就会执行main方法在花括号间的函数所有指令。每个java程序
最少都会有一个类以及一个main().

每个应用程序只有一个main()函数


public  公开给其他类存取
class 类声明
MyClass 类的名称

{ 类的左括号

void 代表没有返回值 
main  方法的名称
String[]  必须要传String的数组给此方法当参数，命名为args

{ 方法 的左括号

out 打印到标准输出上(默认为命令行)
“ss” 要输出的字符串

;每一行结束都必须用分号结尾


编写带有main()的类

在java中的所有东西都会属于某个类


你会建立源文件(扩展名为.java)，然后将它编译成新的类文件(扩展名为.class)

真正被执行的是类


main()就是程序的起点


保存，编译，运行


1.做某事

声明，设定，调用方法等普通语句

int x  =3;
String name = "Dirk";
x = x *17;
System.out.Print("x is"+x);
double d = Math.random();


2. 反复某件事
for ,while的循环(loop)


while (x>12){
	x = x-1;
}


for (int x=0;x <10;x=x+1){
	System.out.print("x is now " +x);
}


空格符通常无关紧要

用名称与类型(type)来声明变量

类型与方法都必须定义在花括号中。

public void go(){}

3. 在适当条件做某件事


if/else 的条件分支测试

if (x==10){
	System.out.println("x must be 10");
}else{
	System.out.println("x isn't 10");
}


if ((x <3) & (name.equals("Dirt"))){
	System.out.println("Gently");
}
	System.out.println("this line runs no matter what");

while (moreBalls == true){
	keepJuggling());



int x =4;

while (x>3){
	x = x-1;
}


int z =27;
while (z==17){
	}


为何所有的东西都得包含在类中？

因为java是面向对象的语言，它不像是以前的程序语言那样。
类是对象的蓝图，而java中的绝大多数东西都是独享


并不是每一个类都需要加上一个main


java中的integer与boolean两种类型并不相容。

boolean isHot =true;
while(isHot){}


语句以分号结束
程序块以{}划出范围
用名称与类型声明变量
等号是赋值运算符
两个等号用来当等号运算符

只要条件测试结果为真，while循环就会一直执行块内的程序

把boolean测试放在括号中
while (x==4){}

system.out.println会在最后面插入换行，若你想让后续的输出以新的一行开始
可以使用println
若是使用print则后续的输出还是会在同一行


设计真正的应用程序


java编译器负责对.java文件编译成.class内文件(字节码文件，以供jvm使用)

jvm负责运行.class内文件，jvm最重要的作用是实现操作系统与代码的无关性(程序与操作系统分离
)
 	


2. 类与对象


以对象来思考

当你在设计类时，要记得对象是靠类的模型塑造出来的

对象是已知的事物
对象会执行的动作

对象本身已知的事物被称为实例变量(instance variable)


对象可以执行的动作被称为方法(methods)

实例变量(状态)

方法(行为)


对象本身已知的食物称为实例变量(instance variable)
它们代表对象的状态(数据)，且该类型的每一个对象都会独立的
拥有一份该类型的值


所以也可以把对象当作为实例


对象可以执行的打破给你做称为方法
在设计类时，也会设计出操作对象数据的方法。
对象带有读取或操作实例变量的方法是很常见的

对象带有实例变量和方法，但它们都是类设计中的一部分


到底类与对象两者之间有什么不同？



一个类和许多对象

类不是对象，却是用来创建对象的模型

类是对象的蓝图，它会告诉虚拟机如何创建某种类型的对象。根据某类
创建出的对象都会有自己的实例变量。

创建一个对象

如何才能运行对象？

需要两个类，一个是要被操作于对象的类,另一个是用来测试该类的类。

测试用的类带有main()并且会在其中建立与与存取被测的对象

. 圆点运算符能让你存取对象的状态与行为

//建立对象

Dog d = new Dog();

//通过操作和调用

method 
d.bark();

//通过操作数存取属性


d.size = 40;

编写类，实例变量，方法，
编写测试用的类
在测试用的类中建立对象并存取对象的变量和方法



main()的两种用途：

测试真正的类
启动你的Java应用程序

创建对象时，它会存放在称为 堆的内存区域中
不管对象如何创建都会放在此区域中。
此区域并非普通的堆；它是可回收垃圾的堆(Garbage-Collectible Heap)


java会根据对象的大小来分配内存空间。比如说15个实例变量的对象所占的空间就可能
会比只有两个实例变量的对象要打
java会主动管理内存。当某个对象被java虚拟机察觉不再会被使用到，该对象就会被标记
成可回收的。
如果内存开始不足，垃圾收集器就会启动来清理垃圾，回收空间，让空间能够再次被利用

全局变量


在任何类中的任何程序都可以存取public static的方法

任何变量只要加上public,static和final，基本上都会变成全局变量取用的常数


java程序是由一组类所组成，其中有一个类会带有启动用的main()方法
因此程序员必须要编写一或多个类进行提交
若用户没有java虚拟机则必须一并提交才能让应用程序运行起来


任何java中的事物都必须呆在类中。pi常数或random()类方法也必须定义在Math这个类中

而你必须记住这类近似全局的事物在Java中算是例如。
它们是非常特殊的情况，不会有多个实例或对象


面向对象设计扩展功能不需改动之前已经测试好的程序代码

所有的java程序都定义在类中

类如同j蓝图描述该类型的对象要如何创阿金


对象自治，你无需在意它如何完成任务

对象有已知的事物，并能执行工作

对象本身已知道的事物称为实例变量，它代表对象的状态
对象可执行的动作称为方法，它代表对象的行为

创建类时，可能同时会需要创建独立，测试用的类

类可以继承自较为抽象的父类

java的程序在执行期是一组会互相交谈的对象



认识变量

变量有两种：primitive主数据类型和引用

对象的状态(instace variable)与局部(local)变量(声明在方法中的变量)


会把变量用于参数(arguments,传递给方法的值)以及返回类型(执行方法所返回的值)

java很注重类型

声明变量

primitive主数据类型用来保存基本类型的值，包括整数，布尔和浮点数等
而对象引用保存的是对象的引用

变量必须拥有类型，

int count;
变量  名称

primitive主数据类型

类型 位数  值域

boolean 与char

boolean true或false
数值(带正负号)


integer

byte 8 bits

short 16 bits


int  32bits

long 64 bits


浮点数

float 32 bits
double 64 bits


primitive主数据类型的声明与赋值声明


int x;
x =234;
byte b =89;
boolean isFun =true;

double d =2222.3;
char c ="f";
int z= x;
boolean isPunkRock;

isPunkRock = false;
boolean powerOn ;
powerOn = isFun;
long big = 234;
float f =23.4f;


要确保变量能够存下所保存的值

不会出现溢出


避开股那件自


保留字

boolean,byte,char,double,float,int,long,
short,public,private,protected,abstract,final,native,
static,strictfp,syncthron,transient,volatile,if

else,do,while,switch,case,default,for,break,continue,
assert,
class,extends,implements,import ,instanceof,interface,
new,package,super,this,catch,finally,try,throw,return,
void,const,goto,enum

如何控制对象？

事实上没有对象变量这样的东西
只有引用(reference)到对象的变量
对象引用变量保存的是存取对象的方法

它并不是对象的容器，而是类似指向对象的指针或地址

在java中我们不会也不该知道引用变量中实际装载的是什么，
它只是用来代表单一的对象，只有Java虚拟机才会知道
如何使用引用来取得该对象


对象引用也只是一个变量值

对象的声明，创建与赋值有三步：

1.声明一个引用变量

要求java虚拟机分配空间给引用比那里，并一次变量命名，
此引用变量将永远被固定为Dog类型。

Dog MyDog
2. 创建对象

new Dog();
要求java虚拟机分配堆空间给新建立的Dog对象

3.连接对象和引用


需要关心的应该是需要建立多少个对象和引用，对象的实际大小

对于任意一个java虚拟机来说，所有的引用大小都一样，
但不同的java虚拟机间可能会以不同的方式来表示引用，因此某个java虚拟机的引用
大小可能会大于或小于另一个java虚拟机的引用

数组

1.声明一个int数组变量，数组变量是数组对象的遥控器
int[] nums;
2. 创建大小为7的数组，并将它赋值给之前声明为int[]的变量nums


nums = new int[7];


3.赋予int数组的每一个元素一个int值。
要记得在int数组中的每个元素皆为int类型的变量


数组也是对象

数组能够让你使用位置索引来快速，随机地存取其中的元素

数组中的每个元素都是变量。
主数据类型变量或这引用变量，可以放进该类型变量中的值都可以当作此类型数组的元素
所以在int类型的数组中，每个元素可以装载一个int

引用变量只会保存引用，而不是对象本身。

无论被声明来承载的是主数据类型或对象本身，数组永远是对象

创建Dog数组

1.声明一个Gog数组变量

Dog[] pets;


2. 创建大小为7的数组

pets = new Dog[7];

3.创建新的Dog对象并将他们赋值给数组的水元素

控制实例，通过引用变量

java注重类型
一旦数组被声明出来，就只能装入所声明类型的元素

我们对数组的操作可以不需要变量名称。只需要数组索引(位置；就可以操作特定对象了)

变量有两种：primitive主数据类型和引用
变量的声明必须有类型和名称

primitive主数据类型变量值是该值的字节所表示的


引用变量的值代表位于堆之对象的存取方法

没有引用到任何对象的引用变量的值为null值

数组一定是个对象，不管所声明的元素是否为主数据而理想呢
并且

第四章 方法操作实例变量

对象的行为

状态影响行为，行为状态。

对象有状态和行为两种属性，分别由实例变量与方法来表示。

类的每个实例(也即是特定类型的每个对象)可以维持自己的实例变量


记住：类所描述的是对象知道什么与执行什么？

类是对象的蓝图，在编写类时，你是在描述Java虚拟机应该如何
制作该类型的对象。
你已经知道每个对象有独立的实例变量值


同一类型的每个对象能够有不同的方法吗？

任一类的每个实例都带有相同的方法，但是方法可以根据实例
变量的值来表现不同的行为

可以传值给方法


可以能会用实参(argument)或形参(parameter)来调用传给
方法的参数。


方法会运用实参。调用的一方会传入实参


实参是传给方法的值。当它传入方法后就成了形参。

参数跟局部(local)变量是一样的。
它有类型与名称，可以在方法内运行。


重点是：如果某个方法需要参数，你就一定得传东西给他。那个
东西得是适当类型的值

1. 调用Dog上的bark()方法，并传入"3"这个值(作为此方法的参数)



Dog d = new Dog();
d.bark(3);


2.以int类型表示的值3会传递给bark()


3.此值会传给numOfBarks这个参数(int类型的变量)

void bark(int numOfBarks){
	while (numOfBarks>0){
	System.out.println("runff")
}}


4.把numOfBarks当做一般的变量使用

可以从方法中取返回值


方法可以有返回值。每个方法都声明返回的类型，但目前都是
把方法设成返回void类型，这代表并没有返回任何东西

void go(){}


但可以声明一个方法，回传给调用方指定的类型值，

int giveSecret(){
	return 68;
}



如果你将一个方法有返回值，你就必须返回所声明类型的值
(或是与声明类型兼容的值



int theSecret = life.giveSecret();

int giveSecret(){
	return 88;
}


可以向方法中传入一个以上的参数


方法可以有多个采纳数。在声明的时候要用逗号分开传入，
传入的时候要用逗号分开


最重要的是，如果方法有参数，你一定要以正确数量，类型和顺序来
传递参数。


调用需要两个参数的方法，并传入两个参数：
void go(){
	TestStuff t = new TestStuff();
	t.takeTwo(12,32);

}


传入的参数会以相同的顺序赋值。
第一个实参会赋值给第一个形参，以此类推


void takeTwo(int x,int y){
	int z = x+y;
	System.out.println("Total is"+z);
}



也可以将变量当做参数传入，只要类型相符就可以

void go(){
	int foo=7;
	int bar = 3;
	t.takeTwo(foo,bar);
}


void takeTwo(int x,int y){
	int z = x+y
	System.out.println("total is "+z);
}


java是通过值传递的
也就是通过拷贝传递

int x =7;
声明一个int类型的变量并赋值给7,代表7的字节组合会放进称为x的变量中


void go(int z){} 

声明一个有int参数的方法，参数名称为z

foo.go(x);

void go(int z){}

以x为参数传入go()这个方法中，x的字节组合会被拷贝并装进z中


void go(int z){
	z =0;
}


在方法中改变z的值，此时x的值不会改变，传给z的只是一个拷贝

方法无法改变调用方所传入的参数



方法只能声明单一的返回值。若你需要返回3个int值。
就把返回类型说明为int的数组，将值装进数组中来返回。


可以返回会被隐含转换成声明类型的其他类型值。
例如说用byte当做int类型的返回。但若声明的类型容量
小鱼想要返回的类型时，必须作明确的转换

java并未要求一定要处理返回值。
你可以调用返回非void类型的方法而不必理会返回值，这代表你要的是
方法的行为而不是返回值。可以不指派返回值

类定义对象所知的行为

运用参数与返回类型


封装(Encapsulation)

数据隐藏
如何隐藏数据？

使用公有与私有这两个存取修饰符(access modifier)


封装的基本原则：将你的实例变量标记为私有的，并提供公有的
getter与setter来控制存取动作

将实例变量标记为private

任何有值可以被运用到的地方，都可以调用方法的方式取得该类型的值



int x = 3+24;

int x = 3+one.getSize();


数组中对象的行为
数组中的对象的行为


数组中的对象就如同其他的对象一样。唯一的差别就是如何取数
不同处在于如何取得亚空气。


1.声明一个装载7个Dog引用的Dog数组

Dog[] pets;
pets = new Dog[7];

2. 创建两个Dog对象并赋值为数组的前两项元素

pets[0] = new Dog();
3. 调用这两个Dog对象的方法

pets[0].setSize(30);
int x = pets[0].getSize();
pets[1].setSize(8);


声明与初始化实例变量


int size;
String name;


实例变量永远都会有默认值。如果你没有明确的赋值给实例
变量，或没有调用setter,实例变量还是会有值！

p84





